/* FILE: main/base/__extender.scss */

//
// Helper extenders
//





// Horizontal widget area

	%horizontal_widget_area {
		display: flex;
		justify-content: space-between;
		flex-wrap: wrap;
		gap: $golden + rem;
		padding-top: $golden + em;
		padding-bottom: $golden + em;

		.widget {
			position: relative;
			flex: 1 1 10em;
			padding: ( $golden + em ) 0;
			margin: 0;

			@include media( map_get( $breakpoint, 'l' ) ) {
				flex-basis: 0%;
			}

		}

	}



// Background overlay automated from text color

	%background_overlay_from_text_color_container {
		position: relative;
		z-index: 1; // Trick to keep pseudo element below child elements
	}

	%background_overlay_from_text_color {
		@extend %background_overlay_from_text_color_container;

		&::before {
			content: '';
			position: absolute;
			width: 100%;
			height: 100%;
			left: 0;
			top: 0;
			background-color: currentColor;
			border-radius: inherit;
			opacity: $overlay_from_text_color_opacity;
			z-index: -1; // Trick to keep pseudo element below child elements
		}

	}

	%background_overlay_from_text_color_after {
		@extend %background_overlay_from_text_color_container;

		&::after {
			content: '';
			position: absolute;
			width: 100%;
			height: 100%;
			left: 0;
			top: 0;
			background-color: currentColor;
			border-radius: inherit;
			opacity: $overlay_from_text_color_opacity;
			z-index: -1; // Trick to keep pseudo element below child elements
		}

	}



// Box shadow

	%box_shadow {
		box-shadow: 0 0 2em rgba( #000, .4 );
	}



// Vertical gaps

	%padding_top {
		padding-top: $vertical_gap * $golden_minor;

		@include media( map_get( $breakpoint, 'm' ) ) {
			padding-top: $vertical_gap * $golden_major;
		}

		@include media( map_get( $breakpoint, 'l' ) ) {
			padding-top: $vertical_gap;
		}

	}

	%padding_bottom {
		padding-bottom: $vertical_gap * $golden_minor;

		@include media( map_get( $breakpoint, 'm' ) ) {
			padding-bottom: $vertical_gap * $golden_major;
		}

		@include media( map_get( $breakpoint, 'l' ) ) {
			padding-bottom: $vertical_gap;
		}

	}

	%margin_top {
		margin-top: $vertical_gap * $golden_minor;

		@include media( map_get( $breakpoint, 'm' ) ) {
			margin-top: $vertical_gap * $golden_major;
		}

		@include media( map_get( $breakpoint, 'l' ) ) {
			margin-top: $vertical_gap;
		}

	}

	%margin_bottom {
		margin-bottom: $vertical_gap * $golden_minor;

		@include media( map_get( $breakpoint, 'm' ) ) {
			margin-bottom: $vertical_gap * $golden_major;
		}

		@include media( map_get( $breakpoint, 'l' ) ) {
			margin-bottom: $vertical_gap;
		}

	}
