/////////////////////
//
// Mixins
//
/////////////////////





//
// Vendor Imports
//

	//
	// @link  http://instyle-css.salsitasoft.com/
	// @link  https://css-tricks.com/instyle-current-selector-sass/
	//
	@import 'vendor/instyle';



//
// Universal Responsive media query
//
// This is the default media query for `only screen`
// and using `and` as logical conjunction.
//
// @example
// 	@include media(
// 		1600,                     // -> 'and (min-width: 100em)'
// 		1600px,                   // -> 'and (min-width: 1600px)'
// 		( 1600,   'min-height' ), // -> 'and (min-height: 100em)'
// 		( 1600px, 'min-height' ), // -> 'and (min-height: 1600px)'
// 		( 1600,   'max-height' ), // -> 'and (max-height: 99.9375em)'
// 		( 1600px, 'max-height' ), // -> 'and (max-height: 1600px)'
// 	) {
// 		$content;
// 	}
//
// IMPORTANT:
// Do not use LibSass when compiling SCSS files (with Prepros) as it seems
// not to be able to handle lists as mixin parameters!
//
// @since  4.0.0
//
// @param  lists $queries  Media query condition lists (arrays).
//
@mixin media( $queries... ) {

	$output : '';

	@each $query in $queries {
		@if (
			$query
			and (
				list == type-of( $query )
				or number == type-of( $query )
			)
		) {

			// Default query rule (the 2nd value in list) if not set otherwise

				@if ( 1 == length( $query ) ) {
					$query : append( $query, 'min-width' );
				}

			// Query value (the 1st value in list) in ems, or display it unchanged

				//
				// Query value must be set as SASS number, which can actually also contain a unit.
				// SASS string must be enclosed in parentheses, so never enclose the query value in those.
				//
				// @link  http://sass-lang.com/documentation/Sass/Script/Functions.html#unit-instance_method
				//
				$query_value : nth( $query, 1 );

				@if (
					number == type-of( $query_value )
					and '' == unit( $query_value )
				) {

					// If the query is `max`, deduct a single pixel from unit-less query value.
					// (We do not do this if the query value contains a unit!)
					@if ( str-index( nth( $query, 2 ), 'max' ) ) {
						$query_value : $query_value - 1;
					}

					// Convert query value to ems.
					$query_value : $query_value / 16 + em;

					$query : set-nth( $query, 1, $query_value );

				}

			// Add to output

				$output : $output
					+ ' and ('
					+ nth( $query, 2 )
					+ ': '
					+ nth( $query, 1 )
					+ ')';

		}
	}

	@if ( 0 < str-length( $output ) ) {
		@media #{ 'only screen' + $output } {
			@content
		}
	} @else {
		@content
	}

} // /media



	// Legacy, backwards compatibility

		@mixin responsive(
				$width: map_get( $breakpoint, 's' ),
				$property: 'min-width',
				$unit: em
			) {
				@if ( em != $unit ) {
					$width : $width + $unit;
				}
				@include media(
					( $width, $property )
				) {
					@content
				}
		} // /responsive

		@mixin responsive_minmax(
				$min: map_get( $breakpoint, 's' ),
				$max: map_get( $breakpoint, 'm' ),
				$property_min: 'min-width',
				$property_max: 'max-width',
				$unit: em
			) {
				@if ( em != $unit ) {
					$min : $min + $unit;
					$max : $max + $unit;
				}
				@include media(
					( $min, $property_min ),
					( $max, $property_max )
				) {
					@content
				}
		} // /responsive_minmax



//
// Output heading tags styles
//
// @param  num  $multiplier    Alter heading maps values
// @param  bool $global_styles Whether to output the heading tags global styles (these don't according the $multiplier)
//
@mixin h_tags( $multiplier: 1, $global_styles: false ) {

	@each $selector, $settings in $h_tags_setup {

		$size          : nth( $settings, 1 );
		$line_height   : nth( $settings, 2 );
		$margin_top    : nth( $settings, 3 );
		$margin_bottom : nth( $settings, 4 );

		$size: $size * $multiplier;

		@if 1 > $size {
			$size: 1;
		}

		#{$selector} {
			font-size: $size + em;
			line-height: $line_height;

			@if 1 < $size {

				margin-top: $margin_top + em;
				margin-bottom: $margin_bottom + em;

			} @else {

				margin-top: $golden_major + em;
				margin-bottom: $golden_major + em;

			}

		}

	}

	@if $global_styles {

		#{$h_tags} {
			@extend %break_words;
			@extend %line_height_golden_minor;
			padding: 0;
			text-rendering: optimizeLegibility; // https://developer.mozilla.org/en-US/docs/CSS/text-rendering

			&:first-child,
			.screen-reader-text + & {
				margin-top: 0;
			}

			a {
				text-decoration: none;
				color: inherit;
			}

		}

	}

} // /h_tags



//
// Context
//
// @link  https://www.youtube.com/watch?v=o4ok4gsiQSw
//
// @param  string $replace
// @param  string $withs
//
@mixin context( $replace, $withs... ) {

	@each $with in $withs {

		@at-root #{ selector_replace( #{&}, $replace, $with ) } {
			@content;
		}

	}

} // /context



//
// Selectors for container with specific number of children
//
// @link  http://lea.verou.me/2011/01/styling-children-based-on-their-number-with-css3/
//
// @param  string $selector A child selector.
// @param  int    $count    Number of children in container.
// @param  int    $min      Optional starting number of children in container.
//
// IMPORTANT (for LibSass)!
// ========================
//
// To compile correctly with LibSass, we have to move the `@include children()` part
// out of SASS selectors nesting structure and include the whole selectors path again
// in the `children()` mixin.
//
// Otherwise those selectors would be prepended with the nested hierarchy (so, will be duplicated).
//
// Even `@at-root` won't help in this case (plus it's being used in the `children()` mixin).
//
// On the other hand, we have to use LibSass to prevent more complicated issues with line breaks
// in nested selectors...
//
@mixin children( $selector, $count: 2, $min: 1 ) {

	$selectors: ();

	@for $i from $min through $count {
		$selectors: append( $selectors, '#{$selector}:nth-child(#{$i}):nth-last-child(#{ $count + 1 - $i })', comma );
	}

	@at-root #{$selectors} {
		@content;
	}

} // /children



//
// LTR/RTL property value
//
// @param  string $property
// @param  string $value_ltr
// @param  string $value_rtl
//
@mixin rtl_property( $property, $value_ltr, $value_rtl ) { // {{RTL}}

	@if rtl == $language_direction {
		#{ $property }: $value_rtl;
	} @else {
		#{ $property }: $value_ltr;
	}

} // /rtl_property



//
// :hover, :active, :focus states
//
// You can optionally use :link and &.
//
// @param  string $state
//
@mixin haf( $states: ( 'h', 'a', 'f' ) ) {

	$selectors: ();

	@each $state in $states {
		@if 'f' == $state {
			$selectors: append( $selectors, '&:focus', comma );
		} @else if 'a' == $state {
			$selectors: append( $selectors, '&:active', comma );
		} @else if 'l' == $state {
			$selectors: append( $selectors, '&:link', comma );
		} @else if '&' == $state {
			$selectors: append( $selectors, '&', comma );
		} @else {
			$selectors: append( $selectors, '&:hover', comma );
		}
	}

	#{ $selectors } {
		@content;
	}

} // /haf
